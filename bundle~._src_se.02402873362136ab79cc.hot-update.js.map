{"version":3,"sources":["webpack:///./src/store/middleware/account.saga.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA8D;AACyD;AAKxF;AAE/B,SAAU,oBAAoB,CAAC,KAAU;;;;;;gBAEpB,qBAAM,+DAAI,CAAC,kFAAwB,EAAE,KAAK,CAAC,OAAO,CAAC;;gBAA1D,IAAI,GAAG,SAAmD;gBAChE,qBAAM,8DAAG,CAAC,gFAAmB,CAAC,IAAI,CAAC,CAAC;;gBAApC,SAAoC,CAAC;;;;gBAErC,qBAAM,8DAAG,CAAC,8EAAiB,EAAE,CAAC;;gBAA9B,SAA8B,CAAC;;;;;CAEtC;AAED,SAAU,yBAAyB,CAAC,KAAU;;;;;;gBAEzB,qBAAM,+DAAI,CAAC,iFAAuB,EAAE,KAAK,CAAC,OAAO,CAAC;;gBAAzD,IAAI,GAAG,SAAkD;gBAC/D,qBAAM,8DAAG,CAAC,oFAAuB,CAAC,IAAI,CAAC,CAAC;;gBAAxC,SAAwC,CAAC;;;;gBAEzC,qBAAM,8DAAG,CAAC,kFAAqB,EAAE,CAAC;;gBAAlC,SAAkC,CAAC;;;;;CAE1C;AAED,SAAU,oBAAoB,CAAC,KAAU;;;;;;gBAEpB,qBAAM,+DAAI,CAAC,8EAAoB,EAAE,KAAK,CAAC,OAAO,CAAC;;gBAAtD,IAAI,GAAG,SAA+C;gBAC5D,qBAAM,8DAAG,CAAC,+EAAkB,CAAC,IAAI,CAAC,CAAC;;gBAAnC,SAAmC,CAAC;;;;gBAEpC,OAAO,CAAC,GAAG,CAAC,KAAG,CAAC,CAAC;gBACjB,qBAAM,8DAAG,CAAC,6EAAgB,EAAE,CAAC;;gBAA7B,SAA6B,CAAC;;;;;CAErC;AAEM,SAAU,WAAW;;;;;gBAClB,2DAAG;gBACL,qBAAM,qEAAU,CAAC,iEAAY,EAAE,oBAAoB,CAAC;;;oBAApD,SAAoD;;gBACpD,qBAAM,qEAAU,CAAC,qEAAgB,EAAE,yBAAyB,CAAC;;;oBAA7D,SAA6D;;gBAC7D,qBAAM,qEAAU,CAAC,gEAAW,EAAE,oBAAoB,CAAC;oBAHvD,qBAAM;wBAGF,SAAmD;wBACrD;;gBAJF,SAIE,CAAC;;;;CACN","file":"bundle~._src_se.02402873362136ab79cc.hot-update.js","sourcesContent":["import {all, call, put, takeLatest} from 'redux-saga/effects';\nimport {getAccountListingService, getAccountDetailService, updateAccountService} from \"../../services/account.service\";\nimport {\n    loadAccounts, loadAccountsSuccess, loadAccountsError,\n    getAccountDetail, getAccountDetailSuccess, getAccountDetailError,\n    saveAccount, saveAccountSuccess, saveAccountError\n} from '../slice/account.slice'\n\nfunction* loadingAccountsAsync(param: any) {\n    try {\n        const data = yield call(getAccountListingService, param.payload);\n        yield put(loadAccountsSuccess(data));\n    } catch (err) {\n        yield put(loadAccountsError());\n    }\n}\n\nfunction* loadingAccountDetailAsync(param: any) {\n    try {\n        const data = yield call(getAccountDetailService, param.payload);\n        yield put(getAccountDetailSuccess(data));\n    } catch (err) {\n        yield put(getAccountDetailError());\n    }\n}\n\nfunction* updatingAccountAsync(param: any) {\n    try {\n        const data = yield call(updateAccountService, param.payload);\n        yield put(saveAccountSuccess(data));\n    } catch (err) {\n        console.log(err);\n        yield put(saveAccountError());\n    }\n}\n\nexport function* AccountSaga() {\n    yield all([\n        yield takeLatest(loadAccounts, loadingAccountsAsync),\n        yield takeLatest(getAccountDetail, loadingAccountDetailAsync),\n        yield takeLatest(saveAccount, updatingAccountAsync),\n    ]);\n}\n"],"sourceRoot":""}