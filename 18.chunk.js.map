{"version":3,"sources":["webpack:///./node_modules/date-fns/esm/startOfDay/index.js","webpack:///./node_modules/date-fns/esm/subMilliseconds/index.js","webpack:///./node_modules/date-fns/esm/startOfQuarter/index.js","webpack:///./node_modules/date-fns/esm/setMonth/index.js","webpack:///./node_modules/date-fns/esm/startOfWeekYear/index.js","webpack:///./node_modules/date-fns/esm/subMinutes/index.js","webpack:///./node_modules/date-fns/esm/subHours/index.js","webpack:///./node_modules/date-fns/esm/subDays/index.js","webpack:///./node_modules/date-fns/esm/subWeeks/index.js","webpack:///./node_modules/date-fns/esm/subMonths/index.js","webpack:///./node_modules/date-fns/esm/subYears/index.js","webpack:///./node_modules/date-fns/esm/setSeconds/index.js","webpack:///./node_modules/date-fns/esm/setMinutes/index.js","webpack:///./node_modules/date-fns/esm/setHours/index.js","webpack:///./node_modules/date-fns/esm/setQuarter/index.js","webpack:///./node_modules/date-fns/esm/setYear/index.js","webpack:///./node_modules/date-fns/esm/startOfMonth/index.js","webpack:///./node_modules/date-fns/esm/startOfYear/index.js","webpack:///./node_modules/date-fns/esm/parseISO/index.js","webpack:///./node_modules/date-fns/esm/parse/_lib/parsers/index.js","webpack:///./node_modules/date-fns/esm/parse/index.js","webpack:///./node_modules/date-fns/esm/startOfWeek/index.js","webpack:///./node_modules/date-fns/esm/toDate/index.js"],"names":["startOfDay","dirtyDate","arguments","date","setHours","subMilliseconds","dirtyAmount","amount","startOfQuarter","currentMonth","getMonth","month","setMonth","dirtyMonth","year","getFullYear","day","getDate","dateWithDesiredMonth","Date","setFullYear","daysInMonth","Math","min","startOfWeekYear","dirtyOptions","options","locale","localeFirstWeekContainsDate","firstWeekContainsDate","defaultFirstWeekContainsDate","firstWeek","subMinutes","subHours","subDays","subWeeks","subMonths","subYears","setSeconds","dirtySeconds","seconds","setMinutes","dirtyMinutes","minutes","dirtyHours","hours","setQuarter","dirtyQuarter","quarter","oldQuarter","floor","diff","setYear","dirtyYear","isNaN","NaN","startOfMonth","setDate","startOfYear","cleanDate","patterns","dateTimeDelimiter","timeZoneDelimiter","timezone","dateRegex","timeRegex","timezoneRegex","parseISO","argument","additionalDigits","RangeError","Object","prototype","toString","call","dateStrings","splitDateString","parseYearResult","parseYear","parseDate","restDateString","offset","timestamp","getTime","time","parseTime","result","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","parseTimezone","dateString","timeString","array","split","length","test","substr","token","exec","replace","regex","RegExp","captures","match","parseInt","century","slice","isWeekDate","dayOfYear","parseDateUnit","week","dayOfWeek","_year","validateWeekDate","isoWeekYear","setUTCFullYear","fourthOfJanuaryDay","getUTCDay","setUTCDate","dayOfISOWeekYear","daysInMonths","isLeapYearIndex","validateDate","validateDayOfYearDate","max","value","parseTimeUnit","validateTime","parseFloat","timezoneString","sign","_hours","validateTimezone","numericPatterns","timezonePatterns","parseNumericPattern","pattern","string","valueCallback","matchResult","rest","parseTimezonePattern","parseAnyDigitsSigned","parseNDigits","n","parseNDigitsSigned","dayPeriodEnumToHours","enumValue","normalizeTwoDigitYear","twoDigitYear","currentYear","isCommonEra","absCurrentYear","rangeEnd","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","G","priority","parse","_options","era","width","set","flags","setUTCHours","incompatibleTokens","y","isTwoDigitYear","ordinalNumber","unit","validate","_date","normalizedTwoDigitYear","Y","getUTCWeekYear","startOfUTCWeek","R","_match","_flags","firstWeekOfYear","startOfUTCISOWeek","u","Q","context","setUTCMonth","q","M","L","w","setUTCWeek","I","setUTCISOWeek","d","subPriority","isLeapYear","D","E","setUTCDay","e","wholeWeekDays","weekStartsOn","c","i","setUTCISODay","a","dayPeriod","b","B","h","isPM","H","K","k","m","setUTCMinutes","s","setUTCSeconds","S","pow","setUTCMilliseconds","X","timestampIsSet","x","t","_token","T","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","notWhitespaceRegExp","unescapedLatinCharacterRegExp","dirtyDateString","dirtyFormatString","dirtyReferenceDate","requiredArgs","String","formatString","toInteger","localeWeekStartsOn","defaultWeekStartsOn","toDate","subFnOptions","setters","dateToSystemTimezone","index","tokens","map","substring","firstCharacter","longFormatter","longFormatters","formatLong","join","usedTokens","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens","parser","Array","isArray","incompatibleToken","_i","usedToken","indexOf","concat","fullToken","push","parseResult","cleanEscapedString","uniquePrioritySetters","setter","sort","filter","setterArray","utcDate","getTimezoneOffsetInMilliseconds","convertedDate","input","startOfWeek","getDay","argStr","console","warn","Error","stack"],"mappings":"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","file":"18.chunk.js","sourcesContent":["import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMilliseconds from '../addMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfQuarter\n * @category Quarter Helpers\n * @summary Return the start of a year quarter for the given date.\n *\n * @description\n * Return the start of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a quarter for 2 September 2014 11:55:00:\n * var result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Jul 01 2014 00:00:00\n */\n\nexport default function startOfQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var currentMonth = date.getMonth();\n  var month = currentMonth - currentMonth % 3;\n  date.setMonth(month, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport getDaysInMonth from '../getDaysInMonth/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setMonth\n * @category Month Helpers\n * @summary Set the month to the given date.\n *\n * @description\n * Set the month to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} month - the month of the new date\n * @returns {Date} the new date with the month set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set February to 1 September 2014:\n * var result = setMonth(new Date(2014, 8, 1), 1)\n * //=> Sat Feb 01 2014 00:00:00\n */\n\nexport default function setMonth(dirtyDate, dirtyMonth) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var month = toInteger(dirtyMonth);\n  var year = date.getFullYear();\n  var day = date.getDate();\n  var dateWithDesiredMonth = new Date(0);\n  dateWithDesiredMonth.setFullYear(year, month, 15);\n  dateWithDesiredMonth.setHours(0, 0, 0, 0);\n  var daysInMonth = getDaysInMonth(dateWithDesiredMonth); // Set the last day of the new month\n  // if the original date was the last day of the longer month\n\n  date.setMonth(month, Math.min(day, daysInMonth));\n  return date;\n}","import getWeekYear from '../getWeekYear/index.js';\nimport startOfWeek from '../startOfWeek/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Date} the start of a week-numbering year\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * var result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * var result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\n\nexport default function startOfWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  var date = startOfWeek(firstWeek, dirtyOptions);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMinutes from '../addMinutes/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subMinutes\n * @category Minute Helpers\n * @summary Subtract the specified number of minutes from the given date.\n *\n * @description\n * Subtract the specified number of minutes from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the minutes subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 30 minutes from 10 July 2014 12:00:00:\n * var result = subMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 11:30:00\n */\n\nexport default function subMinutes(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMinutes(dirtyDate, -amount);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addHours from '../addHours/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subHours\n * @category Hour Helpers\n * @summary Subtract the specified number of hours from the given date.\n *\n * @description\n * Subtract the specified number of hours from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of hours to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the hours subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 2 hours from 11 July 2014 01:00:00:\n * var result = subHours(new Date(2014, 6, 11, 1, 0), 2)\n * //=> Thu Jul 10 2014 23:00:00\n */\n\nexport default function subHours(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addHours(dirtyDate, -amount);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addDays from '../addDays/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @description\n * Subtract the specified number of days from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * var result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\n\nexport default function subDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addDays(dirtyDate, -amount);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addWeeks from '../addWeeks/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subWeeks\n * @category Week Helpers\n * @summary Subtract the specified number of weeks from the given date.\n *\n * @description\n * Subtract the specified number of weeks from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of weeks to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the weeks subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 4 weeks from 1 September 2014:\n * var result = subWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Aug 04 2014 00:00:00\n */\n\nexport default function subWeeks(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addWeeks(dirtyDate, -amount);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMonths from '../addMonths/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * var result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function subMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, -amount);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addYears from '../addYears/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subYears\n * @category Year Helpers\n * @summary Subtract the specified number of years from the given date.\n *\n * @description\n * Subtract the specified number of years from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 years from 1 September 2014:\n * var result = subYears(new Date(2014, 8, 1), 5)\n * //=> Tue Sep 01 2009 00:00:00\n */\n\nexport default function subYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addYears(dirtyDate, -amount);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setSeconds\n * @category Second Helpers\n * @summary Set the seconds to the given date.\n *\n * @description\n * Set the seconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} seconds - the seconds of the new date\n * @returns {Date} the new date with the seconds set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 45 seconds to 1 September 2014 11:30:40:\n * var result = setSeconds(new Date(2014, 8, 1, 11, 30, 40), 45)\n * //=> Mon Sep 01 2014 11:30:45\n */\n\nexport default function setSeconds(dirtyDate, dirtySeconds) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var seconds = toInteger(dirtySeconds);\n  date.setSeconds(seconds);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setMinutes\n * @category Minute Helpers\n * @summary Set the minutes to the given date.\n *\n * @description\n * Set the minutes to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} minutes - the minutes of the new date\n * @returns {Date} the new date with the minutes set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 45 minutes to 1 September 2014 11:30:40:\n * var result = setMinutes(new Date(2014, 8, 1, 11, 30, 40), 45)\n * //=> Mon Sep 01 2014 11:45:40\n */\n\nexport default function setMinutes(dirtyDate, dirtyMinutes) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var minutes = toInteger(dirtyMinutes);\n  date.setMinutes(minutes);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setHours\n * @category Hour Helpers\n * @summary Set the hours to the given date.\n *\n * @description\n * Set the hours to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} hours - the hours of the new date\n * @returns {Date} the new date with the hours set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 4 hours to 1 September 2014 11:30:00:\n * var result = setHours(new Date(2014, 8, 1, 11, 30), 4)\n * //=> Mon Sep 01 2014 04:30:00\n */\n\nexport default function setHours(dirtyDate, dirtyHours) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var hours = toInteger(dirtyHours);\n  date.setHours(hours);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport setMonth from '../setMonth/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setQuarter\n * @category Quarter Helpers\n * @summary Set the year quarter to the given date.\n *\n * @description\n * Set the year quarter to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} quarter - the quarter of the new date\n * @returns {Date} the new date with the quarter set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set the 2nd quarter to 2 July 2014:\n * var result = setQuarter(new Date(2014, 6, 2), 2)\n * //=> Wed Apr 02 2014 00:00:00\n */\n\nexport default function setQuarter(dirtyDate, dirtyQuarter) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var quarter = toInteger(dirtyQuarter);\n  var oldQuarter = Math.floor(date.getMonth() / 3) + 1;\n  var diff = quarter - oldQuarter;\n  return setMonth(date, date.getMonth() + diff * 3);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setYear\n * @category Year Helpers\n * @summary Set the year to the given date.\n *\n * @description\n * Set the year to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} year - the year of the new date\n * @returns {Date} the new date with the year set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set year 2013 to 1 September 2014:\n * var result = setYear(new Date(2014, 8, 1), 2013)\n * //=> Sun Sep 01 2013 00:00:00\n */\n\nexport default function setYear(dirtyDate, dirtyYear) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var year = toInteger(dirtyYear); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  }\n\n  date.setFullYear(year);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * var result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * var result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\n\nexport default function startOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var cleanDate = toDate(dirtyDate);\n  var date = new Date(0);\n  date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The previous `parse` implementation was renamed to `parseISO`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   parseISO('2016-01-01')\n *   ```\n *\n * - `parseISO` now validates separate date and time values in ISO-8601 strings\n *   and returns `Invalid Date` if the date is invalid.\n *\n *   ```javascript\n *   parseISO('2018-13-32')\n *   //=> Invalid Date\n *   ```\n *\n * - `parseISO` now doesn't fall back to `new Date` constructor\n *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function parseISO(argument, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : toInteger(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var date;\n\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (isNaN(date) || !date) {\n    return new Date(NaN);\n  }\n\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n\n    if (isNaN(time) || time === null) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n\n    var result = new Date(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate(), dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    result.setFullYear(dirtyDate.getUTCFullYear());\n    return result;\n  }\n\n  return new Date(timestamp + time + offset);\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString; // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex); // Invalid ISO-formatted year\n\n  if (!captures) return {\n    year: null\n  };\n  var year = captures[1] && parseInt(captures[1]);\n  var century = captures[2] && parseInt(captures[2]);\n  return {\n    year: century == null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return null;\n  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string\n\n  if (!captures) return null;\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return null; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n}\n\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n// February is null to handle the leap year (using ||)\n\n\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100;\n}\n\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}","import getUTCWeekYear from '../../../_lib/getUTCWeekYear/index.js';\nimport setUTCDay from '../../../_lib/setUTCDay/index.js';\nimport setUTCISODay from '../../../_lib/setUTCISODay/index.js';\nimport setUTCISOWeek from '../../../_lib/setUTCISOWeek/index.js';\nimport setUTCWeek from '../../../_lib/setUTCWeek/index.js';\nimport startOfUTCISOWeek from '../../../_lib/startOfUTCISOWeek/index.js';\nimport startOfUTCWeek from '../../../_lib/startOfUTCWeek/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar MILLISECONDS_IN_SECOND = 1000;\nvar numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/,\n  // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/,\n  // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/,\n  // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/,\n  // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/,\n  // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/,\n  // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  minute: /^[0-5]?\\d/,\n  // 0 to 59\n  second: /^[0-5]?\\d/,\n  // 0 to 59\n  singleDigit: /^\\d/,\n  // 0 to 9\n  twoDigits: /^\\d{1,2}/,\n  // 0 to 99\n  threeDigits: /^\\d{1,3}/,\n  // 0 to 999\n  fourDigits: /^\\d{1,4}/,\n  // 0 to 9999\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/,\n  // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/,\n  // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/,\n  // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/ // 0 to 9999, -0 to -9999\n\n};\nvar timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/\n};\n\nfunction parseNumericPattern(pattern, string, valueCallback) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  var value = parseInt(matchResult[0], 10);\n  return {\n    value: valueCallback ? valueCallback(value) : value,\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseTimezonePattern(pattern, string) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  } // Input is 'Z'\n\n\n  if (matchResult[0] === 'Z') {\n    return {\n      value: 0,\n      rest: string.slice(1)\n    };\n  }\n\n  var sign = matchResult[1] === '+' ? 1 : -1;\n  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n  return {\n    value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * MILLISECONDS_IN_SECOND),\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseAnyDigitsSigned(string, valueCallback) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);\n}\n\nfunction parseNDigits(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction parseNDigitsSigned(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^-?\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction dayPeriodEnumToHours(enumValue) {\n  switch (enumValue) {\n    case 'morning':\n      return 4;\n\n    case 'evening':\n      return 17;\n\n    case 'pm':\n    case 'noon':\n    case 'afternoon':\n      return 12;\n\n    case 'am':\n    case 'midnight':\n    case 'night':\n    default:\n      return 0;\n  }\n}\n\nfunction normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  var isCommonEra = currentYear > 0; // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n\n  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n  var result;\n\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    var rangeEnd = absCurrentYear + 50;\n    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;\n    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // User for validation\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\n\n\nvar parsers = {\n  // Era\n  G: {\n    priority: 140,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // AD, BC\n        case 'G':\n        case 'GG':\n        case 'GGG':\n          return match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n        // A, B\n\n        case 'GGGGG':\n          return match.era(string, {\n            width: 'narrow'\n          });\n        // Anno Domini, Before Christ\n\n        case 'GGGG':\n        default:\n          return match.era(string, {\n            width: 'wide'\n          }) || match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n      }\n    },\n    set: function (date, flags, value, _options) {\n      flags.era = value;\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['R', 'u', 't', 'T']\n  },\n  // Year\n  y: {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'yy'\n        };\n      };\n\n      switch (token) {\n        case 'y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, _options) {\n      var currentYear = date.getUTCFullYear();\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week-numbering year\n  Y: {\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'YY'\n        };\n      };\n\n      switch (token) {\n        case 'Y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'Yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, options) {\n      var currentYear = getUTCWeekYear(date, options);\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);\n        date.setUTCHours(0, 0, 0, 0);\n        return startOfUTCWeek(date, options);\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);\n      date.setUTCHours(0, 0, 0, 0);\n      return startOfUTCWeek(date, options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week-numbering year\n  R: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'R') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (_date, _flags, value, _options) {\n      var firstWeekOfYear = new Date(0);\n      firstWeekOfYear.setUTCFullYear(value, 0, 4);\n      firstWeekOfYear.setUTCHours(0, 0, 0, 0);\n      return startOfUTCISOWeek(firstWeekOfYear);\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Extended year\n  u: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'u') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Quarter\n  Q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'Q':\n        case 'QQ':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'Qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'QQQ':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'QQQQQ':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'QQQQ':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone quarter\n  q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'q':\n        case 'qq':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'qqq':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'qqqqq':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'qqqq':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Month\n  M: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'M':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'MM':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Mo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'MMM':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // J, F, ..., D\n\n        case 'MMMMM':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // January, February, ..., December\n\n        case 'MMMM':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone month\n  L: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'L':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'LL':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Lo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'LLL':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // J, F, ..., D\n\n        case 'LLLLL':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // January, February, ..., December\n\n        case 'LLLL':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week of year\n  w: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'w':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'wo':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCWeek(setUTCWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week of year\n  I: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'I':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'Io':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Day of the month\n  d: {\n    priority: 90,\n    subPriority: 1,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'd':\n          return parseNumericPattern(numericPatterns.date, string);\n\n        case 'do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n      var month = date.getUTCMonth();\n\n      if (isLeapYear) {\n        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n      } else {\n        return value >= 1 && value <= DAYS_IN_MONTH[month];\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCDate(value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of year\n  D: {\n    priority: 90,\n    subPriority: 1,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'D':\n        case 'DD':\n          return parseNumericPattern(numericPatterns.dayOfYear, string);\n\n        case 'Do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n\n      if (isLeapYear) {\n        return value >= 1 && value <= 366;\n      } else {\n        return value >= 1 && value <= 365;\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(0, value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of week\n  E: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // Tue\n        case 'E':\n        case 'EE':\n        case 'EEE':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'EEEEE':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'EEEEEE':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'EEEE':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local day of week\n  e: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'e':\n        case 'ee':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'eo':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'eee':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'eeeee':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'eeeeee':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'eeee':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']\n  },\n  // Stand-alone local day of week\n  c: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'c':\n        case 'cc':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'co':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'ccc':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // T\n\n        case 'ccccc':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tu\n\n        case 'cccccc':\n          return match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tuesday\n\n        case 'cccc':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']\n  },\n  // ISO day of week\n  i: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        if (value === 0) {\n          return 7;\n        }\n\n        return value;\n      };\n\n      switch (token) {\n        // 2\n        case 'i':\n        case 'ii':\n          // 02\n          return parseNDigits(token.length, string);\n        // 2nd\n\n        case 'io':\n          return match.ordinalNumber(string, {\n            unit: 'day'\n          });\n        // Tue\n\n        case 'iii':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // T\n\n        case 'iiiii':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tu\n\n        case 'iiiiii':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tuesday\n\n        case 'iiii':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 7;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCISODay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']\n  },\n  // AM or PM\n  a: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'a':\n        case 'aa':\n        case 'aaa':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaaa':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaa':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['b', 'B', 'H', 'K', 'k', 't', 'T']\n  },\n  // AM, PM, midnight\n  b: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'b':\n        case 'bb':\n        case 'bbb':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbbb':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbb':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'B', 'H', 'K', 'k', 't', 'T']\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'B':\n        case 'BB':\n        case 'BBB':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBBB':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBB':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 't', 'T']\n  },\n  // Hour [1-12]\n  h: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'h':\n          return parseNumericPattern(numericPatterns.hour12h, string);\n\n        case 'ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 12;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else if (!isPM && value === 12) {\n        date.setUTCHours(0, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['H', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-23]\n  H: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'H':\n          return parseNumericPattern(numericPatterns.hour23h, string);\n\n        case 'Ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 23;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(value, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-11]\n  K: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'K':\n          return parseNumericPattern(numericPatterns.hour11h, string);\n\n        case 'Ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'H', 'k', 't', 'T']\n  },\n  // Hour [1-24]\n  k: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'k':\n          return parseNumericPattern(numericPatterns.hour24h, string);\n\n        case 'ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 24;\n    },\n    set: function (date, _flags, value, _options) {\n      var hours = value <= 24 ? value % 24 : value;\n      date.setUTCHours(hours, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'H', 'K', 't', 'T']\n  },\n  // Minute\n  m: {\n    priority: 60,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'm':\n          return parseNumericPattern(numericPatterns.minute, string);\n\n        case 'mo':\n          return match.ordinalNumber(string, {\n            unit: 'minute'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMinutes(value, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Second\n  s: {\n    priority: 50,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 's':\n          return parseNumericPattern(numericPatterns.second, string);\n\n        case 'so':\n          return match.ordinalNumber(string, {\n            unit: 'second'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCSeconds(value, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Fraction of second\n  S: {\n    priority: 30,\n    parse: function (string, token, _match, _options) {\n      var valueCallback = function (value) {\n        return Math.floor(value * Math.pow(10, -token.length + 3));\n      };\n\n      return parseNDigits(token.length, string, valueCallback);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMilliseconds(value);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Timezone (ISO-8601. +00:00 is `'Z'`)\n  X: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'X':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'XX':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'XXXX':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'XXXXX':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'XXX':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'x']\n  },\n  // Timezone (ISO-8601)\n  x: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'x':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'xx':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'xxxx':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'xxxxx':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'xxx':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'X']\n  },\n  // Seconds timestamp\n  t: {\n    priority: 40,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value * 1000), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  },\n  // Milliseconds timestamp\n  T: {\n    priority: 20,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  }\n};\nexport default parsers;","import defaultLocale from '../locale/en-US/index.js';\nimport subMilliseconds from '../subMilliseconds/index.js';\nimport toDate from '../toDate/index.js';\nimport assign from '../_lib/assign/index.js';\nimport longFormatters from '../_lib/format/longFormatters/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from '../_lib/protectedTokens/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport parsers from './_lib/parsers/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar notWhitespaceRegExp = /\\S/;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 0001, ..., 999               |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\n *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Old `parse` was renamed to `toDate`.\n *   Now `parse` is a new function which parses a string using a provided format.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   toDate('2016-01-01')\n *   parse('2016-01-01', 'yyyy-MM-dd', new Date())\n *   ```\n *\n * @param {String} dateString - the string to parse\n * @param {String} formatString - the string of tokens\n * @param {Date|Number} referenceDate - defines values missing from the parsed dateString\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {Date} the parsed date\n * @throws {TypeError} 3 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.locale` must contain `match` property\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\n\nexport default function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {\n  requiredArgs(3, arguments);\n  var dateString = String(dirtyDateString);\n  var formatString = String(dirtyFormatString);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.match) {\n    throw new RangeError('locale must contain match property');\n  }\n\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (formatString === '') {\n    if (dateString === '') {\n      return toDate(dirtyReferenceDate);\n    } else {\n      return new Date(NaN);\n    }\n  }\n\n  var subFnOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale // If timezone isn't specified, it will be set to the system timezone\n\n  };\n  var setters = [{\n    priority: TIMEZONE_UNIT_PRIORITY,\n    subPriority: -1,\n    set: dateToSystemTimezone,\n    index: 0\n  }];\n  var i;\n  var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, subFnOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp);\n  var usedTokens = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {\n      throwProtectedError(token, formatString, dirtyDateString);\n    }\n\n    if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {\n      throwProtectedError(token, formatString, dirtyDateString);\n    }\n\n    var firstCharacter = token[0];\n    var parser = parsers[firstCharacter];\n\n    if (parser) {\n      var incompatibleTokens = parser.incompatibleTokens;\n\n      if (Array.isArray(incompatibleTokens)) {\n        var incompatibleToken = void 0;\n\n        for (var _i = 0; _i < usedTokens.length; _i++) {\n          var usedToken = usedTokens[_i].token;\n\n          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {\n            incompatibleToken = usedTokens[_i];\n            break;\n          }\n        }\n\n        if (incompatibleToken) {\n          throw new RangeError(\"The format string mustn't contain `\".concat(incompatibleToken.fullToken, \"` and `\").concat(token, \"` at the same time\"));\n        }\n      } else if (parser.incompatibleTokens === '*' && usedTokens.length) {\n        throw new RangeError(\"The format string mustn't contain `\".concat(token, \"` and any other token at the same time\"));\n      }\n\n      usedTokens.push({\n        token: firstCharacter,\n        fullToken: token\n      });\n      var parseResult = parser.parse(dateString, token, locale.match, subFnOptions);\n\n      if (!parseResult) {\n        return new Date(NaN);\n      }\n\n      setters.push({\n        priority: parser.priority,\n        subPriority: parser.subPriority || 0,\n        set: parser.set,\n        validate: parser.validate,\n        value: parseResult.value,\n        index: setters.length\n      });\n      dateString = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n      } // Replace two single quote characters with one single quote character\n\n\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      } // Cut token from string, or, if string doesn't match the token, return Invalid Date\n\n\n      if (dateString.indexOf(token) === 0) {\n        dateString = dateString.slice(token.length);\n      } else {\n        return new Date(NaN);\n      }\n    }\n  } // Check if the remaining input contains something other than whitespace\n\n\n  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {\n    return new Date(NaN);\n  }\n\n  var uniquePrioritySetters = setters.map(function (setter) {\n    return setter.priority;\n  }).sort(function (a, b) {\n    return b - a;\n  }).filter(function (priority, index, array) {\n    return array.indexOf(priority) === index;\n  }).map(function (priority) {\n    return setters.filter(function (setter) {\n      return setter.priority === priority;\n    }).sort(function (a, b) {\n      return b.subPriority - a.subPriority;\n    });\n  }).map(function (setterArray) {\n    return setterArray[0];\n  });\n  var date = toDate(dirtyReferenceDate);\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37\n\n\n  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));\n  var flags = {};\n\n  for (i = 0; i < uniquePrioritySetters.length; i++) {\n    var setter = uniquePrioritySetters[i];\n\n    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {\n      return new Date(NaN);\n    }\n\n    var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)\n\n    if (result[0]) {\n      utcDate = result[0];\n      assign(flags, result[1]); // Result is date\n    } else {\n      utcDate = result;\n    }\n  }\n\n  return utcDate;\n}\n\nfunction dateToSystemTimezone(date, flags) {\n  if (flags.timestampIsSet) {\n    return date;\n  }\n\n  var convertedDate = new Date(0);\n  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n  return convertedDate;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","import toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}"],"sourceRoot":""}